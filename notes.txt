###############################################################################
################################ JAVA REACTIVO ################################
###############################################################################

- RxJava ¿Qué es?
  Es una librería Java que implementa las ReactiveX (extensiones reactivas).
  Se basa en la composición asíncrona y programas basados en eventos, mediante el uso de secuencias observables.

- ¿Qué ventajas nos aporta?
  * Legibilidad
  * Simplifica la concurrencia
  * Composición de operadores y funciones
  * Permite añadir comportamiento al procesamiento asíncrono.
      Ejecutar sentencias, rutinas cuando ocurre un evento y esto pasará a un hilo aparte.
  * Permite utilizar programación síncrona y asíncrona.


################################# Fundamentos #################################

Para gestionar lo que ocurre, esta librería utiliza principalmente el patrón Observer.
Patrón Observer: "Es un Patrón de diseño que define una dependencia del tipo uno-a-muchos entre objetos, de manera
                     que cuando uno de los objetos cambia su estado, notifica este cambio a todos los dependientes".

* Observer:
Los elementos que son notificados, los que estan recibiendo los eventos.

* Observable:
Los observables son los elementos que notifican a todos sus "observers" los cambios.
Para ello es necesario que estos "observer" se registren de alguna manera.

Por ello para que la comunicación entre Observable y Observer pueda suceder, se usa un mecanismo de suscripción.
Los "Observer" se suscriben a los "Observables" para que estos los notifiquen los eventos.

################################ Push vs Pull:

Estamos acostumbrados a un modelo donde le pedimos al productor un nuevo elemento cada vez que lo necesitamos (Pull)
en vez de que el productor nos avise de cuando está disponible (Push). En ocasiones provoca bloquear al usuario
hasta que esté disponible.

            +-------------------------+---------------------------+
            |   Iterable / Iterator   |    Observable / Observer  |
            +-------------------------+---------------------------+
            |        T next()         |          onNext(T)         |
            |    throws Exception     |     onError(Throwable)    |
            |        returns          |       onCompleted()       |
            +-------------------------+---------------------------+

################################ Eventos:

Un elemento observable puede producir 3 tipos de eventos:
* Evento Normal: Sucede con el onNext()
* Evento de terminación: onCompleted()  -> Estados finales
* Evento de error: onError()            -> Estados finales

Cuando se suscribe a un Observable se indica los 3 métodos que se llamen al lanzarse cada evento.
El Observer viene a ser una interfaz que agrupa estos 3 métodos.

################################ Subscription:

Cuando se realiza una subscripción, se crea un objeto Subscription que nos da acceso al control del flujo de
información, permitiendo saber si hay elementos subscritos o terminar la conexión.

public interface Subscription<t> {
    boolean isUnsubscribed();
    void unsubscribe();
}

Mientras que no haya elementos suscritos a los Observables no sucede nada.

################################ Subscriber:

Existe un elemento Subscriber que implementa ambas interfaces, Observer (lo que nos permite consumir los eventos
del Observable) y Subscription (con lo que podremos controlar el flujo desde dentro del objeto).

Code:

Observable<String> telegram;

Subscriber<String> subscriber = new Subscriber<String> {
    @Override
    public void onNext(String text) {
        if (text.startsWith("STOP")) {
            unsubscribe();
        }
    }

    @Override
    public void onCompleted(String text) {
    }

    @Override
    public void onError(Throwable e) {
        e.printStackTrace();
    }
};

telegram.subscribe(subscriber);

################################ Creación de Observables:

* Vacíos: Observable.empty()
* Error: Observable.error()
* Con valores concretos: Observable.just(values)
* Custom: Observable.create(details) -> Para crear observables que generen eventos programaticamente
* De una lista: Observable.from()
* Rango numérico: Observable.range(from, n)

Observable.from(DayOfWeek.values()).subscribe(x -> System.out.println(x));
Observable.range(1, 7).map(x -> DayOfWeek.of(x)).subscribe(x -> System.out.println(x));

################################ Hot vs Cold Observables:

Existe 2 tipos de Observables. Se distinguen principalmente sobre la manera en la que emiten los eventos.
Los "Calientes" emiten eventos independientemente de si hay alguien escuchando, mientras que los
"Frios" sólo lo hacen cuando tienen suscriptores, generando el evento para sus suscriptores en exclusiva.

################################ Operadores:

RxJava tiene una serie de operadores que nos permiten realizar acciones sobre los elementos del Observable (eventos),
dominarlos, encadenarlos y realizar composiciones de los mismos será lo que nos de potencia al usar esta librería.
Alguno de estos son:

* Operadores de Transformación:

Aplican transformaciones a los elementos de origen de manera que emitamos objetos distintos a la salida.

  - Map: Nos permite aplicar una transformación a un elementos de nuestro objeto para transformarlo en otra cosa.

  ---------- 1 ------ 2 -------------------- 3 --------------|->
                        map (x => 10 * x)
  ---------- 10 ----- 20 ------------------- 30 -------------|->

  Observable.range(1, 7)
            .map(x -> x*10)
            .subscribe(element -> System.out.println(element));


  - Scan: Aplica una función a cada dato emitido y emite ese valor secuencialmente.

  ---------- 1 ------ 2 ------ 3 ------ 4 -------- 5 --------------|->
                        scan ((x, y) => x + y)
  ---------- 1 ------ 3 ------ 6 ------ 10 ------- 15 -------------|->


  - Reduce: Aplica una función a cada dato emitido y emite el resultado al finalizar.

  ---------- 1 ------ 2 ------ 3 ------ 4 -------- 5 --------------|->
                        reduce ((x, y) => x + y)
  ------------------------------------------------ 15 -------------|->

  - Buffer: Permite almacenar un grupo de resultado y emitirlo como grupo.

  ---------- 1 ------ 2 ------ 3 ----------------- 4 ------ 5 ------- 6 ----------|----->
             |        |        |                    |       |         |           |
             v        v        v                    v       v         v           V
       +----------------------------------------------------------------------------+
       |                              BUFFER                                        |
       +----------------------------------------------------------------------------+
                               |                                       |          |
                               V                                       V          V
          +-----------------------+              +-----------------------+
  ---------- 1 ------ 2 ------ 3 ----------------- 4 ------ 5 ------- 6 ----------|----->
          +-----------------------+              +-----------------------+

  Observable<String> generator1x2 = Observable.create(subscriber -> {
    Random random = new Random();
    List<String> values = Arrays.asList("1", "X", "2");

    while (!subscriber.isUnsubscribed()) {
      subscriber.onNext(values.get(random.nextInt(3)));
    }
    subscriber.onCompleted();
  });

  generator1x2.buffer(15).take(5)


  - FlatMap: Transforma cada elemento del Observable en otra sucesión de observable, se suscribe y los une en un
             único Observable.

  ---------- 1 ------------------ 2 ------- 3 ------------------------------------|----->
             |                    |         |                                     |
             v                    v         V                                     v
       +----------------------------------------------------------------------------+
       |                    FlatMap {  x   ->  -- xx -- xx --|-->    }              |
       +----------------------------------------------------------------------------+
       +      |             |      |         |        |        |                   |
             v             v      V         v        v        v                   v
  ---------- 11 ---------- 11 --- 22 ------ 33 ----- 22 ----- 33 -----------------|----->


  - GroupBy: Divide el observable inicial en un conjunto de observables en base a un criterio.

  Observable.range(1, 100).groupBy(x -> x%2 == 0) : Esto creará 2 grupos de observables true y false (par / impar).


  - Cache: Almacena todos los resultados y los repite siempre igual.

  - Filter: Permite descartar ciertos elementos y emitir sólo un subconjunto de los elementos iniciales.

  ---------- 2 ------ 30 ------ 22 ------ 5 -------- 60 ----- 1 -------|--->
                        filter (x => x > 10)
  ------------------- 30 ------ 22 ----------------- 60 ---------------|--->

  Observable.range(1, 100).filter(a -> a%2 == 1)


  - Distinct: Elimina los duplicados.

  ---------- 1 ------ 2 ------ 2 ------ 1 -------- 3 ------------|--->
                                 distinct
  ---------- 1 ------ 2 -------------------------- 3 ------------|--->


################################ Combinación de Observables:

Es muy habitual trabajar con un conjunto de observacbles que queramos combinar de alguna manera. Para ello RxJava
nos ofrece operadores que permiten combinarlos para emitir un resultado.

  - Merge / Concat: Estos operadores se suscriben los observables que le pasemos como parámetro y unifica los eventos
                  en un único stream de salida.

  ---- 1 --- 2 -------- 3 --------- 4 ----|--->             ---- 1 --- 2 -------- 3 --|-------------------->

  --------------- 5 ---------- 6 ---------|--->             --- 4 -- 5 --|--------------------------------->

                     merge                                                  concat

  ---- 1 --- 2 -- 5 --- 3 ---- 6 -- 4 ----|--->             ---- 1 --- 2 -------- 3 -- 4 -- 5 --|---------->

  - Switch: Muestra los eventos del último observable que ha producido eventos. Cuando aparece un elemento en un
            observable posterior, se borra la suscripción actual.

  -----------------------------------------------------|----------->
      |               |
      |               +------- 10 ----- 20 ---- 30 -----|-->
      |               |         |        |       |      |
      +----1 ----- 2 -|---- 3 --|---|--> |       |      |
      |    |       |  |         |        |       |      |
      v    v       v  v         v        v       v      v
    +-------------------------------------------------------------+
    |                           switch                            |
    +-------------------------------------------------------------+
           |       |            |        |       |      |
           v       v            v        v       v      v
  -------- 1 ----- 2 ---------- 10 ----- 20 ---- 30 ----|----------->

  - Zip
  - CombineLatest / Amb

################################ Temporales:

Permiten alterar el tiempo en la generación de eventos.

  - Timer: Crea un Observable para que emita un evento determinado en un tiempo predefinido.
  - Delay: Retrasa la emisión de eventos por un determinado tiempo.
  - Interval: Emite una secuencia de números infinitos separados por un intervalo definido.
  - Repeat: Crea un Observable que repite un evento múltiples veces.

################################ Retry:

Permite reconectar cuando se produce un error.

  ---------- 1 ----- 2 ------ X -------------- 1 ----- 2 ----- 3 ---------|------->
        ^    |       |        |         ^      |       |       |          |
        |    V       V        V         |      V       V       V          V
    +-------------------------------------------------------------------------+
    |                                  Retry                                  |
    +-------------------------------------------------------------------------+
             |       |                         |       |       |          |
             V       V                         V       V       V          V
  ---------- 1 ----- 2 ----------------------- 1 ----- 2 ----- 3 ---------|------->

################################ Single:

Emite un único evento o da error.

  ----- 1 ----- 2 ------ 3 ---------|---->             ----- 1 -------------------|------------>
        |       |        |          |                        |                    |
        v       v        v          v                        v                    v
    +----------------------------------------------------------------------------------------+
    |                                      single                                            |
    +----------------------------------------------------------------------------------------+
                |                                                                 |
                v                                                                 v
  ------------- X ------------------|---->             -------------------------- 1 ----|------->

################################ Try / Catch:

RxJava nos permite varias formas de utilizar el try catch. Quizás una de las más legibles sea OnErrorResumeNext.

  ----- 1 ----- 2 ------ 3 -------- X --------->
        |       |        |          |
        v       v        v          v
    +--------------------------------------------------------------------+
    |        onErrorResumeNext(  ---- 4 ---- 5 -------|----->  )         |
    +--------------------------------------------------------------------+
        |       |        |              |      |           |
        v       v        v              v      v           v
  ----- 1 ----- 2 ------ 3 ------------ 4 ---- 5 ----------|----->

################################ Side Effects:

Podemos añadir comportamiento a lo que pasa cuando suceden ciertos eventos. RxJava nos da muchos eventos a los que
suscribirnos, pero no se pueden alterar:

* doOnCompleted()       * doOnNext()           * doOnTerminate()
* doOnEach()            * doOnRequest()        * doOnUnsubscribe()
* doOnError()           * doOnSubscribe()

################################ Concurrencia:

Normalmente la concurrencia la va a decidir el que nos consume.

Por ejemplo indicando subscribeOn(scheduler) o observerOn(scheduler),
  se envía un scheduler indicando en que hilo quiere que se ejecute.

################################

- Observable: Es quien empuja los datos hacia su observador
- Observer
- Operator

                       push
     Observable  -----------------> Subscriber

                      listen
     Observable  -----------------> Observer

Observer recibe una notificación junto con los datos y luego puede tomar cualquier acción.
Y el Operator aquí puede realizar la operación de manipulación, transformación y
fusionar diferentes datos, incluso antes de que los datos lleguen a su Observador.

                      Operator
                       |   |    map()
     Observable ------->    ------------> Observer


################################ Observables #################################

- Tipos de Observables:

* Single:
  Observable que solo emite un elemento o arroja un error.
  El método onNext() y onComplete() de Observable se han combinado con onSuccess(), ya que la secuencia solo
  tiene un elemento para emitir.

################################ Construcción ################################

- Creación de un Observable:
  Observable.just(1, 2, 3, 4, 5).subscribe(new Consumer<Integer>() {
    @Override
    public void accept(Integer integer) throws Exception {
        System.out.println(integer);
    }
  });

  -> Replace with lambda:

  Observable.just(1, 2, 3, 4, 5).subscribe(integer -> System.out.println(integer));

  -> Replace lambda with method reference:

  Observable.just(1, 2, 3, 4, 5).subscribe(System.out::println);


- Creación de un Thread:
  Thread thread = new Thread(new Runnable() {
    @Override
        public void run() {
            ...
        }
  });

  -> Replace with lambda:
  Thread thread = new Thread(() -> {
    ...
  });

  -> Replace lambda with method reference:
  En caso tuviesemos un método que se llamase dentro de un lambda, cuyos parámetros coinciden con los de la
  función lamba esto podría refactorizarse, referenciando el método en vez de usar el lambda

  * Lambda: Thread thread = new Thread(() -> { runIt(); });
  * Function: public static void runIt() { ... }

  * Method Reference: Thread thread = new Thread(Main::runIt);
  Se coloca primero la clase donde pertenece el método, luego el método en sí.

  Luego corremos el Threan llamando a su método run.
  thread.run();


################################ Dependencies #################################

<dependency>
  <groupId>io.reactivex.rxjava2</groupId>
  <artifactId>rxjava</artifactId>
  <version>2.2.8</version>
</dependency>